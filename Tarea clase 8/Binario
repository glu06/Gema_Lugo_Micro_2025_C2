#include <stdio.h>
#include "driver/gpio.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "esp_log.h"

#define PIN_ROJO    33
#define PIN_VERDE   25
#define PIN_AZUL    26
#define TAM_PILA    (1024 * 2)
#define RETARDO_ROJO 10000
#define RETARDO_VERDE 2000

#define EVENTO_ROJO_COMPLETO (1 << 0)

EventGroupHandle_t grupoEventos = NULL;

const char *LOG_TAG = "LED_EventGroup";

esp_err_t inicializarLeds(void);
esp_err_t crearTareas(void);
void parpadearLed(int pin);
void tareaRoja(void *param);
void tareaVerde(void *param);

void app_main(void)
{
    grupoEventos = xEventGroupCreate();

    inicializarLeds();
    crearTareas();
}

esp_err_t inicializarLeds(void)
{
    gpio_reset_pin(PIN_ROJO);
    gpio_set_direction(PIN_ROJO, GPIO_MODE_OUTPUT);

    gpio_reset_pin(PIN_VERDE);
    gpio_set_direction(PIN_VERDE, GPIO_MODE_OUTPUT);

    gpio_reset_pin(PIN_AZUL);
    gpio_set_direction(PIN_AZUL, GPIO_MODE_OUTPUT);

    return ESP_OK;
}

esp_err_t crearTareas(void)
{
    static uint8_t parametroFalso;
    TaskHandle_t manejador = NULL;

    xTaskCreatePinnedToCore(tareaRoja,
                            "tareaRoja",
                            TAM_PILA,
                            &parametroFalso,
                            1,
                            &manejador,
                            0);

    xTaskCreatePinnedToCore(tareaVerde,
                            "tareaVerde",
                            TAM_PILA,
                            &parametroFalso,
                            1,
                            &manejador,
                            1);

    return ESP_OK;
}

void parpadearLed(int pin)
{
    for (size_t i = 0; i < 8; i++)
    {
        vTaskDelay(pdMS_TO_TICKS(400));
        gpio_set_level(pin, 1);
        vTaskDelay(pdMS_TO_TICKS(400));
        gpio_set_level(pin, 0);
    }
}

void tareaRoja(void *param)
{
    while (1)
    {
        parpadearLed(PIN_ROJO);
        ESP_LOGE(LOG_TAG, "Tarea Roja: Secuencia completada, seteando evento");
        xEventGroupSetBits(grupoEventos, EVENTO_ROJO_COMPLETO);
        vTaskDelay(pdMS_TO_TICKS(RETARDO_ROJO));
    }
}

void tareaVerde(void *param)
{
    while (1)
    {
        EventBits_t bits = xEventGroupWaitBits(grupoEventos,
                                               EVENTO_ROJO_COMPLETO,
                                               pdTRUE,   // borra el bit cuando lo recibe
                                               pdFALSE,  // no espera mÃºltiples bits
                                               portMAX_DELAY);

        if ((bits & EVENTO_ROJO_COMPLETO) != 0)
        {
            ESP_LOGI(LOG_TAG, "Tarea Verde: Evento recibido, comenzando parpadeo");
            parpadearLed(PIN_VERDE);
            ESP_LOGW(LOG_TAG, "Tarea Verde: Parpadeo terminado");
        }

        vTaskDelay(pdMS_TO_TICKS(100));
    }
}

